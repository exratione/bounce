-- Summary --

The Bounce module collects non-delivery reports generated by remote mail
servers in response to emails sent from your Drupal site. It parses these
non-delivery reports for response codes, scores those codes, and blocks
further emails from being sent to email addresses that have passed a score
threshold. This helps prevent your site from looking like a spam source by
being a good internet citizen and respecting non-delivery responses, such
as a notice that a recipient email account no longer exists.

This module is a rewrite of non-Drupal code that itself resulted from some
years of experience running a few-thousand-subscriber mailing list
covering the sane end of a topic that, unfortunately, tends to trigger
spam filters - because there is a large and obnoxious spam-generating
industry over at the other, less sane end of the pool. The default
settings in Bounce are geared towards helping to maintain good long-term
deliverability of mail under that sort of circumstance.

Bounce employs a modular design in which the functionality necessary to
analyze and respond to non-delivery reports is split between Connector,
Analyst, and Blocker components. Default, working versions of these
components are provided, and developers can easily add other
implementations through hooks defined in this module.

-- Requirements --

1) Drupal Core Version

Bounce requires Drupal 7.12 or later, as that is the earliest version to
support cancellation of mail sending via setting $message['send'] = FALSE
in an implementation of hook_mail_alter().

2) A Mail Account for Non-Delivery Reports

You must have a mail account set up to receive non-delivery report emails.
e.g. automatic responses sent to the account bounces@example.com. That
account must be accessible via POP or IMAP protocols from the server
hosting your Drupal site.

3) Mail Delivery Mechanism Allows Return-Path to be Set

Bounce sets the Return-Path mail header to a different value than the From
header. Not all modules that provide new options for sending mail (i.e. 
implement a MailSystemInterface class) permit this, and some will ignore the
Return-Path setting entirely. Some of the known modules are listed below:

Works:
  Drupal core DefaultMailSystem (via sendmail, so not ideal)
  ManyMail
  Swift Mailer

Does not work:
  Newsletter (uses SMTP Authentication Support)
  PHPMailer (the module, not the library)
  SMTP Authentication Support

4) (Optional, but Very Much Recommended) Send Mail Using SMTP

Ideally you should have your own mail server set up for your domain, and
be sending all outgoing mail from your Drupal site through that server via
a module that permits sending mail via SMTP. If you are not doing this,
then you have far more serious issues with mail deliverability than Bounce
can help you with - for example, sending from the Drupal server using sendmail
on a Linux system cannot respond correctly to greylisting, which looks very
much like a spam sending robot's behavior.

-- Installation and Configuration --

Enable the Bounce module, then navigate to the module's configuration
page. On installation, default configuration is provided for all values
except:

- the mail server and account that will receive non-delivery reports
- the Return-Path header for outgoing mail

Enter these values and you are good to go. e.g. if your site is at
example.com and you have a mailserver at mail.example.com, then you
might set the following values in the General Settings page:

Return-Path header: bounce@example.com

and the following values in the Connector settings page:

Server: mail.example.com
Protocol: POP3S
Login: bounce
Password: my_obscure_password

Note that depending on your mailserver, login may be the account name
('bounce') or the full account email address ('bounce@example.com').

-- How Bounce Marks and Blocks Addresses --

Bounce consists of three major component parts, the Connector, the
Analyst, and the Blocker:

1) On each cron run the Connector logs in to the Return-Path account and
retrieves mail items, the non-delivery reports, that it passes to the
Analyst.

2) The Analyst identifies the original recipient email address and assigns
a code to each non-delivery report.

3) Bounce then writes the codes, email addresses, and reports to the
database.

4) The Blocker peruses the report records on each cron run. Every response
code is associated with a score, with higher scores indicating response
codes that more urgently require action. The Blocker checks to see whether
the sum of recorded scores for any particular email address exceeds a
threshold: those that do are marked and future delivery to these email
addresses is blocked.

Records of past non-delivery reports are cleared out when they become too
old, so an address will only be marked and blocked if it gains enough
non-delivery reports in a short enough time. The default settings for
Bounce will block email addresses fairly aggressively, reasoning that it
is better to deliver too few emails than to look like a spammer or a
mailbot by being non-responsive to non-delivery reports. This is not an
exact science by any means, and different content in mails will trigger
wildly different responses. If there is no big horrible spam-generating
industry spawning spam that shares topics with your site and its emails,
then you can probably set your score threshold higher than the default.

The scoring for specific codes, the threshold for marking emails, and the
age at which records of non-delivery reports are cleared out can all be
configured in the Bounce administration settings pages.

-- Return-Path Notes --

The Return-Path mail header set by Bounce is crucial to the operation of
this module: it is how you tell remote mail servers where you want
non-delivery reports sent to. If the Return-Path header is not set in the
outgoing emails sent by the server, then non-delivery report emails sent
back to you will most likely return directly to the sending account, which
in most circumstances is the site email address set in the administrative
interface. Bounce empties out the email account it is configured to
access, so you want it to have its own account for non-delivery reports.

As noted in the Requirements section above, not all of the options for
sending mail from Drupal respect the Return-Path set in a mail message.

Out of the box, Drupal 7 will correctly set the Return-Path header if 
sending using the DefaultMailSystem mail system. This uses sendmail,
however, to send mail from the local server directly. This will
cause you all sorts of other issues - such as being unable to respond
properly to greylisting, which is definitely going to make you look like a
spam source or mailbot. If you are serious about being a good internet citizen
when it comes to sending mail to your users, then you really should set up a
mail server and send your outgoing mail through that server.

If you are using a mail module that correctly preserves the Return-Path
but you are still losing the Return-Path header between sending and receiving
then the problem is a mail server configuration issue, not a Drupal issue.
It is quite possible, though not commonplace, for a mail server to be
configured to override the Return-Path passed to it in an SMTP session.

-- Use a Mail Server! --

You should absolute, definitely, always be sending outgoing mail through a
full-featured mail server, and not via sendmail on the local web server.
In terms of looking like a spammer, the harm you do yourself by sending
from the local web server will likely outweigh most of what Bounce can do
for you. For example, not correctly handling greylisting is the sign of a
mailbot or compromised server, and that is exactly what will happen if you
send only via sendmail.

There are a range of other important topics relating to deliverability of
email and marking of servers as spam sources, such as the Sender Policy
Framework and other similar schemes, and you are encouraged to research
further.

-- Blocked Mails and Users --

Blocked mails are maintained independently of users. They are not deleted
when a user account is removed, and it is not necessary for a user account
to exist for a specific mail to be blocked.

The administrative settings for Bounce allow notifications to be set for
login, user account editing, password reset, and registration using
blocked email addresses: the general idea is to let the user know that he
or she will not receive mail rather than just silently failing.

-- Component Definition Hooks --

1) hook_bounce_connector()
2) hook_bounce_connector_alter(&$connectors)
3) hook_bounce_analyst()
4) hook_bounce_analyst_alter(&$analysts)
5) hook_bounce_blocker()
6) hook_bounce_blocker_alter(&$blockers)

If you want to make available new components then you can create the
component and declare it as an option for use via implementations of these
hooks in your own module. Once declared, a component will show up as a
selectable option in the general settings administrative form.

-- Other Hooks --

1) hook_bounce_mails_blocked($mails)
2) hook_bounce_mails_unblocked($mails)

React to the blocking and unblocking of mails via these hooks.

3) hook_bounce_code_type()
4) hook_bounce_code_type_alter(&$types)

These fairly trivial hooks provide a list of different categories for the
response code that are assigned to non-delivery reports. The categories
have no material effect.

5) hook_bounce_analysis_alter(&$analysis, $report)

Use this hook to alter the analysis settled on for a particular
non-delivery report.
